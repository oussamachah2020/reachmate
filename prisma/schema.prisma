
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model Sender {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName  String
  lastName  String
  email     String
  avatar    String?
  gender    Gender  @default(MALE)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  EmailSent EmailSent[]
  Template  Template[]
  Category  Category[]
  Tag       Tag[]

  @@map("sender")
}

model Receiver {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName  String
  lastName  String
  email     String
  EmailSent EmailSent[]

  @@map("receiver")
}

model EmailSent {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       String?
  sentAt     DateTime @default(now())
  isRead     Boolean @default(false)
  archived   Boolean @default(false)

  senderId   String @db.Uuid
  sender     Sender @relation(fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String @db.Uuid
  receiver   Receiver @relation(fields: [receiverId], references: [id])
  
  @@map("email_sent")
}

model Template {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject     String
  body        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  lastUsed    DateTime   @default(now())
  usedCount   Int        @default(0)

  senderId    String     @db.Uuid
  sender      Sender     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  tagId       String?    @db.Uuid
  tag         Tag?       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  categoryId  String?    @db.Uuid
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("template")
}

model Category {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  authorId    String     @db.Uuid
  author      Sender     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  templates   Template[] // reverse relation

  @@map("category")
}

model Tag {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  
  authorId    String     @db.Uuid
  author      Sender     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  templates   Template[] // reverse relation

  @@map("tag")
}


enum Gender {
  MALE
  FEMALE
}