
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model Sender {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName  String
  lastName  String
  email     String
  avatar    String?
  gender    Gender  @default(MALE)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  EmailSent EmailSent[]
  Template  Template[]
  Category  Category[]
  Tag       Tag[]
  Attachment Attachment[]
  ScheduledEmail ScheduledEmail[]

  @@map("sender")
}

model Receiver {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName  String
  lastName  String
  email     String
  EmailSent EmailSent[]

  @@map("receiver")
}

model EmailSent {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sentAt     DateTime   @default(now())
  isRead     Boolean    @default(false)
  archived   Boolean    @default(false)
  starred   Boolean    @default(false)

  categoryId String?    @db.Uuid 
  category   Category?  @relation(fields: [categoryId], references: [id])

  tagId      String?    @db.Uuid 
  tag        Tag?       @relation(fields: [tagId], references: [id])

  templateId String     @db.Uuid
  template   Template   @relation(fields: [templateId], references: [id])

  senderId   String     @db.Uuid
  sender     Sender     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String     @db.Uuid
  receiver   Receiver   @relation(fields: [receiverId], references: [id])

  attachments Attachment[] // Updated: One-to-many relation

  @@map("email_sent")
}

model ScheduledEmail {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId     String    @db.Uuid
  sender       Sender    @relation(fields: [senderId], references: [id], onDelete: Cascade)
  toEmail      String
  subject      String
  body         String
  scheduledAt  DateTime
  priority     Priority
  sent         Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@map("scheduled_email") // Optional: if your database table is named exactly like this
}


model Attachment {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileUrl   String
  fileName  String  
  fileType  String   
  size      Int     
  createdAt DateTime   @default(now())

  emailSentId String?    @db.Uuid
  emailSent   EmailSent? @relation(fields: [emailSentId], references: [id]) // FK pointing to EmailSent

  userId      String?   @db.Uuid
  sender      Sender?   @relation(fields: [userId], references: [id])

  @@map("attachment")
}



model Template {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject     String
  body        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  lastUsed    DateTime   @default(now())
  usedCount   Int        @default(0)

  senderId    String     @db.Uuid
  sender      Sender     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  tagId       String?    @db.Uuid
  tag         Tag?       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  categoryId  String?    @db.Uuid
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  EmailSent EmailSent[]

  @@map("template")
}

model Category {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  authorId    String     @db.Uuid
  author      Sender     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  templates   Template[] 
  EmailSent   EmailSent[]

  @@map("category")
}

model Tag {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  
  authorId    String     @db.Uuid
  author      Sender     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  templates   Template[]
  EmailSent   EmailSent[]

  @@map("tag")
}


enum Gender {
  MALE
  FEMALE
}

enum Priority {
  LOW
  NORMAL
  HIGH
}